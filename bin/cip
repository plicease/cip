#!/bin/bash

set -e

if [ "x$CIP_TAG" == "x" ]; then
  export CIP_TAG=default
fi

function usage {
  cat <<EOF
usage: $0 [subcommand]

subcommands:

  cip travis_yml
    - generate a .travis.yml that uses cip

  cip start
  cip before_install
  cip before-install
    - start background container

  cip diag
    - print perl diagnostics

  cip install
    - install necessary dzil and perl prereqs

  cip script
  cip test
    - test your dist

  cip sudo [command [ ... ] ]
    - exec command in container as root

  cip exec [command [ ... ] ]
    - exec command in container as user

  cip bash [ ... ]
  cip tcsh [ ... ]
  cip perl [ ... ]
  cip nano [ ... ]
    - interactive session with bash, tcsh, perl or nano

  cip stop
    - stop the background container

  cip stop_all
  cip stop-all
    - stop all background cip containers

environment:

  CIP_TAG  the docker tag for plicease/ciperl defaults to 'default'
EOF
  exit 2
}

if [ "x$1" == "x" ]; then
  if [ "x$CIP_COMMAND" == "x" ]; then
    usage
  else
    command=$CIP_COMMAND
    export -n CIP_COMMAND
  fi
else
  command=$1
  shift
fi

export CIP_COMP=$(basename $(pwd))
export CIP_CONT=cip-$CIP_COMP-$CIP_TAG

function cip_local_lib {
  container_path=$(docker exec $CIP_CONT printenv PATH)
  # PERL_MB_OPT "--install_base /home/cip/perl5"
  export CIP_LOCAL_LIB="-e PATH=/home/cip/perl5/bin:$container_path -e PERL5LIB=/home/cip/perl5/lib/perl5 -e PERL_MM_OPT=INSTALL_BASE=/home/cip/perl5"
}

function dist_dir_name {
  export CIP_DIST_DIR=$(grep ^name dist.ini | head -1 | cut -d= -f2 | sed 's/^[ ]*//' | sed 's/[ ]*$//')-$(grep ^version dist.ini | head -1 | cut -d= -f2 | sed 's/^[ ]*//' | sed 's/[ ]*$//')
}

function travis_yml {
  cat > .travis.yml <<'EOF'
language: minimal
dist: xenial
services:
  - docker

before_install:
  - curl https://raw.githubusercontent.com/plicease/cip/master/bin/travis-bootstrap | bash
  - cip before-install

install:
  - cip diag
  - cip install

script:
  - cip script

jobs:
  include:
    - env: CIP_TAG=5.29
    - env: CIP_TAG=5.28
    - env: CIP_TAG=5.26
    - env: CIP_TAG=5.24
    - env: CIP_TAG=5.22
    - env: CIP_TAG=5.20
    - env: CIP_TAG=5.18
    - env: CIP_TAG=5.16
    - env: CIP_TAG=5.14
    - env: CIP_TAG=5.12
    - env: CIP_TAG=5.10
    - env: CIP_TAG=5.8

cache:
  directories:
    - "$HOME/.cip"
EOF
}

mkdir -p ~/.cip/install-cache/$CIP_TAG
mkdir -p ~/.cip/dzil-cache/$CIP_TAG
if [ "x$TRAVIS" == "xtrue" ]; then
  chmod 777 ~/.cip/install-cache/$CIP_TAG
  chmod 777 ~/.cip/dzil-cache/$CIP_TAG
fi

case "$command" in

  travis_yml)
    travis_yml
    ;;

  before_install|before-install|start)
    docker run \
      --name $CIP_CONT \
      -v `pwd`:/work \
      -v ~/.cip:/home/cip/.cip \
      -v ~/.cip/install-cache/"$CIP_TAG":/home/cip/perl5 \
      -v ~/.cip/dzil-cache/"$CIP_TAG":/home/cip/dzil \
      -d \
      plicease/ciperl:$CIP_TAG \
      sleep infinity
    case "$command" in
      before_install|before-install)
        echo "+docker version"
        docker version
        echo "+docker image ls"
        docker image ls
        echo "+docker ps"
        docker ps
      ;;
    esac
    # TODO: this works around the fact that the minor version (the y in 5.x.y)
    # may have changed and we may have a cached local::lib.  It's possible that
    # there may be a breaking change between minor versions in a dev release
    # so it would be better to detect that change and clear the cache.
    cip bash -c 'curl https://cpanmin.us | perl - -n --reinstall App::cpanminus'
    if [ -f maint/cip-before-install ]; then
      ./maint/cip-before-install
    fi
    ;;

  diag)
    cip exec perl -V
    ;;

  install)
    cip_local_lib
    if [ -f maint/cip-install ]; then
      ./maint/cip-install
    elif [ -f dist.ini ]; then
      echo ":::: DZIL DEPS   ::::"
      if [ -f alienfile ]; then
        cip sudo bash -c 'dzil-af missing | dzil-cpanm -n'
      fi
      cip sudo bash -c 'dzil-dzil authordeps --missing | dzil-cpanm -n'
      echo ":::: DZIL BUILD  ::::"
      cip exec dzil-dzil build
      echo ":::: MODULE DEPS ::::"
      dist_dir_name
      cip exec bash -c "cd $CIP_DIST_DIR; cpanm -n --installdeps ."
    elif [ -f Makefile.PL ] || [ -f Build.PL ] || [ -f cpanfile ]; then
      cip exec cpanm -n --installdeps .
    else
      echo "unknown installer"
      exit 2;
    fi
    ;;

  script|test)
    cip_local_lib
    if [ -f dist.ini ]; then
      dist_dir_name
      if [ -f "$CIP_DIST_DIR/maint/cip-test" ]; then
        cip bash -c "cd $CIP_DIST_DIR; env PERL_USE_UNSAFE_INC=0 $CIP_ENV ./maint/cip-test"
      elif [ -f "$CIP_DIST_DIR/Makefile.PL" ]; then
        if [ "x$CIP_ENV" == "x" ]; then
          echo "+ perl Makefile.PL"
          cip exec bash -c "cd $CIP_DIST_DIR; perl Makefile.PL"
        else
          echo "+ env $CIP_ENV perl Makefile.PL"
          cip exec bash -c "cd $CIP_DIST_DIR; env $CIP_ENV perl Makefile.PL"
        fi
        echo "+ make"
        cip exec bash -c "cd $CIP_DIST_DIR; make"
        echo "+ env PERL_USE_UNSAFE_INC=0 make test TEST_VERBOSE=1"
        cip exec bash -c "cd $CIP_DIST_DIR; env PERL_USE_UNSAFE_INC=0 make test TEST_VERBOSE=1"
      elif [ -f "$CIP_DIST_DIR/Build.PL" ]; then
        if [ "x$CIP_ENV" == "x" ]; then
          echo "+ perl Build.PL"
          cip exec bash -c "cd $CIP_DIST_DIR; perl Build.PL"
        else
          echo "+ env $CIP_ENV perl Build.PL"
          cip exec bash -c "cd $CIP_DIST_DIR; env $CIP_ENV perl Build.PL"
        fi
        echo "+ ./Build"
        cip exec bash -c "cd $CIP_DIST_DIR; ./Build"
        echo "+ env PERL_USE_UNSAFE_INC=0 ./Build test verbose=1"
        cip exec bash -c "cd $CIP_DIST_DIR; env PERL_USE_UNSAFE_INC=0 ./Build test verbose=1"
      else
        echo "unknown installer (dzil)"
        exit 2;
      fi
    elif [ -f maint/cip-test ]; then
      cip bash -c 'env PERL_USE_UNSAFE_INC=0 ./maint/cip-test'
    elif [ -f Makefile.PL ]; then
      if [ "x$CIP_ENV" == "x" ]; then
        echo "+ perl Makefile.PL"
        cip exec perl Makefile.PL
      else
        echo "+ env $CIP_ENV perl Makefile.PL"
        cip exec env $CIP_ENV perl Makefile.PL
      fi
      echo "+ make"
      cip exec make
      echo "+ env PERL_USE_UNSAFE_INC=0 make test TEST_VERBOSE=1"
      cip exec env PERL_USE_UNSAFE_INC=0 make test TEST_VERBOSE=1t
    elif [ -f Build.PL ]; then
      if [ "x$CIP_ENV" == "x" ]; then
        echo "+ perl Build.PL"
        cip exec perl Build.PL
      else
        echo "+ env $CIP_ENV perl Build.PL"
        cip exec env $CIP_ENV perl Build.PL
      fi
      echo "+ ./Build"
      cip exec ./Build
      echo "+ env PERL_USE_UNSAFE_INC=0 ./Build test verbose=1"
      cip exec env PERL_USE_UNSAFE_INC=0 ./Build test verbose=1
    elif [ -d t ]; then
      echo "+ env PERL_USE_UNSAFE_INC=0 prove -lvm"
      cip exec env PERL_USE_UNSAFE_INC=0 prove -lvm
    else
      echo "unknown instaler"
      exit 2;
    fi
    ;;

  sudo)
    docker exec $CIP_CONT "$@"
    ;;

  exec)
    cip_local_lib
    docker exec $CIP_LOCAL_LIB -e PERL_MB_OPT="--install_base /home/cip/perl5" -u 1000 $CIP_CONT "$@"
    ;;

  bash|tcsh|perl|nano)
    cip_local_lib
    docker exec $CIP_LOCAL_LIB -e PERL_MB_OPT="--install_base /home/cip/perl5" -it -u 1000 $CIP_CONT $command "$@"
    ;;

  stop)
    docker stop /$CIP_CONT
    docker container rm /$CIP_CONT
    ;;

  stop_all|stop-all)
    for name in $( docker ps --format '{{json .Names}}' ) ; do
      name=$( echo $name | jq -r . )
      if echo $name | grep -q ^cip- ; then
        docker stop /$name
        docker stop /$name
      fi
    done
    ;;

  *)
    echo unknown command: $command
    exit 2
    ;;

esac

